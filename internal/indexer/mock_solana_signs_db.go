// Code generated by MockGen. DO NOT EDIT.
// Source: internal/indexer/solana_signs_db.go

// Package indexer is a generated GoMock package.
package indexer

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSolanaSignsDBInterface is a mock of SolanaSignsDBInterface interface.
type MockSolanaSignsDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSolanaSignsDBInterfaceMockRecorder
}

// MockSolanaSignsDBInterfaceMockRecorder is the mock recorder for MockSolanaSignsDBInterface.
type MockSolanaSignsDBInterfaceMockRecorder struct {
	mock *MockSolanaSignsDBInterface
}

// NewMockSolanaSignsDBInterface creates a new mock instance.
func NewMockSolanaSignsDBInterface(ctrl *gomock.Controller) *MockSolanaSignsDBInterface {
	mock := &MockSolanaSignsDBInterface{ctrl: ctrl}
	mock.recorder = &MockSolanaSignsDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSolanaSignsDBInterface) EXPECT() *MockSolanaSignsDBInterfaceMockRecorder {
	return m.recorder
}

// AddSign mocks base method.
func (m *MockSolanaSignsDBInterface) AddSign(arg0 SolTxSigSlotInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSign", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSign indicates an expected call of AddSign.
func (mr *MockSolanaSignsDBInterfaceMockRecorder) AddSign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSign", reflect.TypeOf((*MockSolanaSignsDBInterface)(nil).AddSign), arg0)
}

// GetColums mocks base method.
func (m *MockSolanaSignsDBInterface) GetColums() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColums")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetColums indicates an expected call of GetColums.
func (mr *MockSolanaSignsDBInterfaceMockRecorder) GetColums() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColums", reflect.TypeOf((*MockSolanaSignsDBInterface)(nil).GetColums))
}

// GetDB mocks base method.
func (m *MockSolanaSignsDBInterface) GetDB() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockSolanaSignsDBInterfaceMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockSolanaSignsDBInterface)(nil).GetDB))
}

// GetMaxSign mocks base method.
func (m *MockSolanaSignsDBInterface) GetMaxSign() (*SolTxSigSlotInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxSign")
	ret0, _ := ret[0].(*SolTxSigSlotInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxSign indicates an expected call of GetMaxSign.
func (mr *MockSolanaSignsDBInterfaceMockRecorder) GetMaxSign() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxSign", reflect.TypeOf((*MockSolanaSignsDBInterface)(nil).GetMaxSign))
}

// GetNextSign mocks base method.
func (m *MockSolanaSignsDBInterface) GetNextSign(arg0 uint64) (*SolTxSigSlotInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextSign", arg0)
	ret0, _ := ret[0].(*SolTxSigSlotInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextSign indicates an expected call of GetNextSign.
func (mr *MockSolanaSignsDBInterfaceMockRecorder) GetNextSign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextSign", reflect.TypeOf((*MockSolanaSignsDBInterface)(nil).GetNextSign), arg0)
}

// GetTableName mocks base method.
func (m *MockSolanaSignsDBInterface) GetTableName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTableName indicates an expected call of GetTableName.
func (mr *MockSolanaSignsDBInterfaceMockRecorder) GetTableName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableName", reflect.TypeOf((*MockSolanaSignsDBInterface)(nil).GetTableName))
}

// InsertBatch mocks base method.
func (m *MockSolanaSignsDBInterface) InsertBatch(arg0 []map[string]string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBatch", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBatch indicates an expected call of InsertBatch.
func (mr *MockSolanaSignsDBInterfaceMockRecorder) InsertBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBatch", reflect.TypeOf((*MockSolanaSignsDBInterface)(nil).InsertBatch), arg0)
}
