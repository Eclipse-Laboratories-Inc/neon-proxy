#+STARTUP: showall indent hidestars
#+TOC: headlines 3

* Overview

Components:
- airdropper
- proxy
- indexer
- faucet

Some strange things (services):
- neon_test_invoke_program_loader
- dbcreation
- solana
- proxy_net

proxy-model.py

We have separated services for proxy and indexer and other components. All of them starts from ~proxy-model.py/proxy/testing/docker-compose-test.yml~

In directory ~proxy-model.py/proxy~ we have:
- indexer
- mempool
- proxy
- neon_rpc_api_model

..and ~testing~. From folder testing we can starts all components, see docker-compose-test.yml

** Indexer

#EntryPoint: ~proxy/indexer/indexer_app.py~
#Purpose:
- collecting statistic from Prometeus
- indexer application
  - collect information about completed NEON transactions on Solana
  - index them
  - store index into Postgres

*** How it works

class ~IndexerDB~:
- contains db-connection
- methods:
  - sol_blocks_db - information about completed blocks
  - neon_tx_db - info about NEON transactions, bpf-cycles, EVM-steps, used head_size and so on. Need for stats.
  - neon_tx_logs_db -about events happened diring transactions execution in contracts
  - sol_tx_costs_db - additional information about how many NEON tokens owned with NEON transactions execution and how many SOL-tokens was spent in transaction

Indexer starts
- IndexerStatClient to the Prometeus
- Collectors - collect information about competed Solana transactions
  - finalized
  - confirmed

Other components:
- Ix-Decoder - something about instrtuctions in NEON EVM [TODO:gmm] ?

#EntryPoint starts from collecting finalized transactions from Solana blocks, then collect info about confirmed blocks.

When finalized collector starts (~FinalizedSolTxMetaCollector~), collector will get the last block of the finalized part of the history and iterate throuht all blocks of it.

ConfirmedCollector have different logic for processing finalized and confirmed data.

ConfirmedCollector ask Solana for getting the list of transactions signatures, which were executed for address throught rpc-request ~getSignaturesForAddress~ (see Solana documentation). It's Solana-address of our NEON EVM. [TODO:gmm] - for what?

This rpc api call returns limited list of signatures backward in time. Becouse of that, when we need more deeper in history we need ask Solana with optinal parameters ~limit~ and ~before~. We use for it method ~_build_checkpoint_list~ in procedure iter_tx_meta.

This is how we get all the historical data and put it into the database in ~_save_checkpoint~.

When the data is received, we start getting information about the transactions.

During processing, we retrieve the body of the transactions using the method _iter_tx_meta which use rpc call to Solana ~getTransaction~ (see Solana documetation)

[TODO:gmm] Need understand Solana's block format description. For example I do not undestand what is addressTableLookps in the body of transactions

For confirmed transactions logic is more simple because we dont need save checkpoints.

~run_sol_tx_collector~ saves data to database. It call subroutine ~locate_neon_block~ for try to get the block, and here we have interesting point.

Since a single transaction can be distributed over several blocks, and there may be several blocks between the beginning and the end of the transaction that do not contain data for that transaction, the array of blocks is tied with a linked list. Moving through this linked list we don't need to go through the blocks which don't contain the data we need.

The code calls it a "deque", but it looks more like a "sparse array" to me.

After return to ~run_sol_tx_collector~ collector will parse each instructions by the special decoder. Information about instructions collected (~iter_sol_neon_ix~). There is class SolTxReceiptInfo which filtered only NEON instructions.

[TODO:gmm] - I don't quite understand why we need to parse instructions and how this affects processing.

Solana transactions ~logMessages~ are a way for NeonEVM to tell Indexer what happened during transaction execution. They base64 encoded. From here we can get the hash of each transaction. The code responsible for this can be found ~common_neon/utils/evm_log_decoder.py~. It allows you to extract not only hash, but also returns, events, gas usege for cancelled transactions, and gas for each iteration.

If I understand correctly, it is necessary to decode NeonEVM transactions to find the holder of the transaction and write this data to the index, but this is just a guess.

Anyway, after decoding, if the transaction is in the "done" status, it is saved in the database.

When a new NEON block is completed the statistics are sent to the Prometheus server, and the block itself is saved to the database (~submit block~). Stored info about the block, transactions, logs, events, costs (~set_tx_list~). Class ~NeonTxDB~ contains list of columns.

If current stored block is finalized ~_complete_neon_block~ do special logic for finalized blocks for mapping history data for this block (see ~finalize_block_list~ for details)

In additions info about last parsed blocks (chechpoints) are stored for case, when indexer will be restart.

Proxy will use this information for the Etherium Client (see ~eth_getBlockTransactionCountByHash~ and get_block_by_hash~ at proxy/neon_rpc_api_model/neon_rpc_api_worker.py for example).'

If database doesn't contains block, it wilk generate fake block (see ~_block_from_value~ and ~_generate_fake_block_hash~). Proxy doesn't pull fake blocks from database, instead of it proxy returns empty block (doesn't contans transactions but formatted properly, with zeroes in data fields).

*** Data structures

~ix_decoder_list~ at indexer/indexer.py contains list of instrucions if NeonEVM. The same file contains the transaction ~executor~ (class WriteHolderAccountIx)

*** TODO What do we need to explain

- format of the Solana blocks and transactions, finalized and confirmed
- branches in Solana
- decription of NeonEVM (commands)
