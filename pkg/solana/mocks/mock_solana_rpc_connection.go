// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/solana/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	solana "github.com/gagliardetto/solana-go"
	rpc "github.com/gagliardetto/solana-go/rpc"
	gomock "github.com/golang/mock/gomock"
)

// MockSolanaRpcConnection is a mock of SolanaRpcConnection interface.
type MockSolanaRpcConnection struct {
	ctrl     *gomock.Controller
	recorder *MockSolanaRpcConnectionMockRecorder
}

// MockSolanaRpcConnectionMockRecorder is the mock recorder for MockSolanaRpcConnection.
type MockSolanaRpcConnectionMockRecorder struct {
	mock *MockSolanaRpcConnection
}

// NewMockSolanaRpcConnection creates a new mock instance.
func NewMockSolanaRpcConnection(ctrl *gomock.Controller) *MockSolanaRpcConnection {
	mock := &MockSolanaRpcConnection{ctrl: ctrl}
	mock.recorder = &MockSolanaRpcConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSolanaRpcConnection) EXPECT() *MockSolanaRpcConnectionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSolanaRpcConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSolanaRpcConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSolanaRpcConnection)(nil).Close))
}

// GetAccountInfoWithOpts mocks base method.
func (m *MockSolanaRpcConnection) GetAccountInfoWithOpts(ctx context.Context, account solana.PublicKey, opts *rpc.GetAccountInfoOpts) (*rpc.GetAccountInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountInfoWithOpts", ctx, account, opts)
	ret0, _ := ret[0].(*rpc.GetAccountInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountInfoWithOpts indicates an expected call of GetAccountInfoWithOpts.
func (mr *MockSolanaRpcConnectionMockRecorder) GetAccountInfoWithOpts(ctx, account, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountInfoWithOpts", reflect.TypeOf((*MockSolanaRpcConnection)(nil).GetAccountInfoWithOpts), ctx, account, opts)
}

// GetBalance mocks base method.
func (m *MockSolanaRpcConnection) GetBalance(ctx context.Context, publicKey solana.PublicKey, commitment rpc.CommitmentType) (*rpc.GetBalanceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, publicKey, commitment)
	ret0, _ := ret[0].(*rpc.GetBalanceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockSolanaRpcConnectionMockRecorder) GetBalance(ctx, publicKey, commitment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockSolanaRpcConnection)(nil).GetBalance), ctx, publicKey, commitment)
}

// GetBlockCommitment mocks base method.
func (m *MockSolanaRpcConnection) GetBlockCommitment(ctx context.Context, block uint64) (*rpc.GetBlockCommitmentResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockCommitment", ctx, block)
	ret0, _ := ret[0].(*rpc.GetBlockCommitmentResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockCommitment indicates an expected call of GetBlockCommitment.
func (mr *MockSolanaRpcConnectionMockRecorder) GetBlockCommitment(ctx, block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockCommitment", reflect.TypeOf((*MockSolanaRpcConnection)(nil).GetBlockCommitment), ctx, block)
}

// GetBlockHeight mocks base method.
func (m *MockSolanaRpcConnection) GetBlockHeight(ctx context.Context, commitment rpc.CommitmentType) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeight", ctx, commitment)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHeight indicates an expected call of GetBlockHeight.
func (mr *MockSolanaRpcConnectionMockRecorder) GetBlockHeight(ctx, commitment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeight", reflect.TypeOf((*MockSolanaRpcConnection)(nil).GetBlockHeight), ctx, commitment)
}

// GetBlockWithOpts mocks base method.
func (m *MockSolanaRpcConnection) GetBlockWithOpts(ctx context.Context, slot uint64, opts *rpc.GetBlockOpts) (*rpc.GetBlockResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockWithOpts", ctx, slot, opts)
	ret0, _ := ret[0].(*rpc.GetBlockResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockWithOpts indicates an expected call of GetBlockWithOpts.
func (mr *MockSolanaRpcConnectionMockRecorder) GetBlockWithOpts(ctx, slot, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockWithOpts", reflect.TypeOf((*MockSolanaRpcConnection)(nil).GetBlockWithOpts), ctx, slot, opts)
}

// GetClusterNodes mocks base method.
func (m *MockSolanaRpcConnection) GetClusterNodes(ctx context.Context) ([]*rpc.GetClusterNodesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterNodes", ctx)
	ret0, _ := ret[0].([]*rpc.GetClusterNodesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterNodes indicates an expected call of GetClusterNodes.
func (mr *MockSolanaRpcConnectionMockRecorder) GetClusterNodes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterNodes", reflect.TypeOf((*MockSolanaRpcConnection)(nil).GetClusterNodes), ctx)
}

// GetHealth mocks base method.
func (m *MockSolanaRpcConnection) GetHealth(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealth", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealth indicates an expected call of GetHealth.
func (mr *MockSolanaRpcConnectionMockRecorder) GetHealth(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealth", reflect.TypeOf((*MockSolanaRpcConnection)(nil).GetHealth), ctx)
}

// GetMinimumBalanceForRentExemption mocks base method.
func (m *MockSolanaRpcConnection) GetMinimumBalanceForRentExemption(ctx context.Context, dataSize uint64, commitment rpc.CommitmentType) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinimumBalanceForRentExemption", ctx, dataSize, commitment)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinimumBalanceForRentExemption indicates an expected call of GetMinimumBalanceForRentExemption.
func (mr *MockSolanaRpcConnectionMockRecorder) GetMinimumBalanceForRentExemption(ctx, dataSize, commitment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinimumBalanceForRentExemption", reflect.TypeOf((*MockSolanaRpcConnection)(nil).GetMinimumBalanceForRentExemption), ctx, dataSize, commitment)
}

// GetProgramAccountsWithOpts mocks base method.
func (m *MockSolanaRpcConnection) GetProgramAccountsWithOpts(ctx context.Context, publicKey solana.PublicKey, opts *rpc.GetProgramAccountsOpts) (rpc.GetProgramAccountsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgramAccountsWithOpts", ctx, publicKey, opts)
	ret0, _ := ret[0].(rpc.GetProgramAccountsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgramAccountsWithOpts indicates an expected call of GetProgramAccountsWithOpts.
func (mr *MockSolanaRpcConnectionMockRecorder) GetProgramAccountsWithOpts(ctx, publicKey, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgramAccountsWithOpts", reflect.TypeOf((*MockSolanaRpcConnection)(nil).GetProgramAccountsWithOpts), ctx, publicKey, opts)
}

// GetRecentBlockhash mocks base method.
func (m *MockSolanaRpcConnection) GetRecentBlockhash(ctx context.Context, commitment rpc.CommitmentType) (*rpc.GetRecentBlockhashResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentBlockhash", ctx, commitment)
	ret0, _ := ret[0].(*rpc.GetRecentBlockhashResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentBlockhash indicates an expected call of GetRecentBlockhash.
func (mr *MockSolanaRpcConnectionMockRecorder) GetRecentBlockhash(ctx, commitment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentBlockhash", reflect.TypeOf((*MockSolanaRpcConnection)(nil).GetRecentBlockhash), ctx, commitment)
}

// GetSignatureStatuses mocks base method.
func (m *MockSolanaRpcConnection) GetSignatureStatuses(ctx context.Context, searchTransactionHistory bool, transactionSignatures ...solana.Signature) (*rpc.GetSignatureStatusesResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, searchTransactionHistory}
	for _, a := range transactionSignatures {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSignatureStatuses", varargs...)
	ret0, _ := ret[0].(*rpc.GetSignatureStatusesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignatureStatuses indicates an expected call of GetSignatureStatuses.
func (mr *MockSolanaRpcConnectionMockRecorder) GetSignatureStatuses(ctx, searchTransactionHistory interface{}, transactionSignatures ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, searchTransactionHistory}, transactionSignatures...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignatureStatuses", reflect.TypeOf((*MockSolanaRpcConnection)(nil).GetSignatureStatuses), varargs...)
}

// GetSignaturesForAddressWithOpts mocks base method.
func (m *MockSolanaRpcConnection) GetSignaturesForAddressWithOpts(ctx context.Context, account solana.PublicKey, opts *rpc.GetSignaturesForAddressOpts) ([]*rpc.TransactionSignature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignaturesForAddressWithOpts", ctx, account, opts)
	ret0, _ := ret[0].([]*rpc.TransactionSignature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignaturesForAddressWithOpts indicates an expected call of GetSignaturesForAddressWithOpts.
func (mr *MockSolanaRpcConnectionMockRecorder) GetSignaturesForAddressWithOpts(ctx, account, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignaturesForAddressWithOpts", reflect.TypeOf((*MockSolanaRpcConnection)(nil).GetSignaturesForAddressWithOpts), ctx, account, opts)
}

// GetSlot mocks base method.
func (m *MockSolanaRpcConnection) GetSlot(ctx context.Context, commitment rpc.CommitmentType) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlot", ctx, commitment)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlot indicates an expected call of GetSlot.
func (mr *MockSolanaRpcConnectionMockRecorder) GetSlot(ctx, commitment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlot", reflect.TypeOf((*MockSolanaRpcConnection)(nil).GetSlot), ctx, commitment)
}

// GetTransaction mocks base method.
func (m *MockSolanaRpcConnection) GetTransaction(ctx context.Context, txSig solana.Signature, opts *rpc.GetTransactionOpts) (*rpc.GetTransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx, txSig, opts)
	ret0, _ := ret[0].(*rpc.GetTransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockSolanaRpcConnectionMockRecorder) GetTransaction(ctx, txSig, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockSolanaRpcConnection)(nil).GetTransaction), ctx, txSig, opts)
}

// SendTransaction mocks base method.
func (m *MockSolanaRpcConnection) SendTransaction(ctx context.Context, transaction *solana.Transaction) (solana.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", ctx, transaction)
	ret0, _ := ret[0].(solana.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction.
func (mr *MockSolanaRpcConnectionMockRecorder) SendTransaction(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockSolanaRpcConnection)(nil).SendTransaction), ctx, transaction)
}
